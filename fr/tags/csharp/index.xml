<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>csharp on Jérémy Landon - Dev, Cloud, DevOps &amp; more</title>
    <link>https://blog.jeremylandon.com/fr/tags/csharp/</link>
    <description>Recent content in csharp on Jérémy Landon - Dev, Cloud, DevOps &amp; more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>contact@jeremylandon.com (Jérémy Landon)</managingEditor>
    <webMaster>contact@jeremylandon.com (Jérémy Landon)</webMaster>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://blog.jeremylandon.com/fr/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>[Redis] Implémentation d&#39;une sémaphore distribuée en .NET</title>
        <link>https://blog.jeremylandon.com/fr/2020/05/17/redis-implementation-dune-semaphore-distribuee-en-dotnet/</link>
        <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Sun, 17 May 2020 11:47:46 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/05/17/redis-implementation-dune-semaphore-distribuee-en-dotnet/</guid>
        <description>J&amp;rsquo;ai récemment eu besoin de limiter l&amp;rsquo;utilisation d&amp;rsquo;une portion de mon code entre différents services (à la manière d&amp;rsquo;une sémaphore).
J&amp;rsquo;utilise RedLock.net (lock distribué) pour gérer la concurrence mais ce dernier ne fait qu&amp;rsquo;un verrou unitaire (concurrence = 1) et donc ne répondait pas à mon besoin.</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/redis.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>redis</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>concurrence</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
          
            
              <category>redis</category>
            
          
        
      </item>
      
      <item>
        <title>[.NET] SynchronizationContext, ConfigureAwait et optimisations</title>
        <link>https://blog.jeremylandon.com/fr/2020/05/03/dotnet-synchronizationcontext-configureawait-et-optimisations/</link>
        <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Mon, 11 May 2020 19:32:50 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/05/03/dotnet-synchronizationcontext-configureawait-et-optimisations/</guid>
        <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un SynchronizationContext ? Le SynchronizationContext permet d&amp;rsquo;applique une logique sur les opérations asynchrones et synchrones afin de s&amp;rsquo;adapter à un contexte voulu.
Par défaut la classe SynchronizationContext n&amp;rsquo;est qu&amp;rsquo;une base de travail, elle ne synchronise rien, elle expose entre autres une méthode virtuelle Post qui a pour rôle de distribuer un message au contexte (la &amp;ldquo;logique de synchronisation&amp;rdquo; se fera en grande partie ici).</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/dotnetcore.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>performance</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
          
            
              <category>performance</category>
            
          
        
      </item>
      
      <item>
        <title>[.NET] Comment réinitialiser une collection proprement: clear(), new() ou null ?</title>
        <link>https://blog.jeremylandon.com/fr/2020/04/20/dotnet-comment-reinitialiser-une-collection-proprement-clear-new-ou-null/</link>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Mon, 20 Apr 2020 19:45:31 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/04/20/dotnet-comment-reinitialiser-une-collection-proprement-clear-new-ou-null/</guid>
        <description>On m&amp;rsquo;a récemment posé la question sur &amp;ldquo;quelle est la &amp;ldquo;meilleure&amp;rdquo; méthode pour supprimer les éléments d&amp;rsquo;une collection à taille variable&amp;rdquo;.
 myCollection.Clear() myCollection = new List() myCollection = null  Selon moi comme toujours il n&amp;rsquo;y a pas de &amp;ldquo;meilleure&amp;rdquo; solution ou même de &amp;ldquo;méthode magique&amp;rdquo;, tout dépend de ce qu&amp;rsquo;on veut réellement faire et ce qu&amp;rsquo;on veut transmettre comme message aux prochains développeurs qui liront le code.</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/dotnetcore.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>benchmark</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
          
            
              <category>benchmark</category>
            
          
        
      </item>
      
      <item>
        <title>[Azure] Comment gérer les erreurs 429 sur Azure Cosmos DB</title>
        <link>https://blog.jeremylandon.com/fr/2020/04/06/azure-comment-gerer-les-erreurs-429-sur-azure-cosmos-db/</link>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Sun, 19 Apr 2020 02:37:09 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/04/06/azure-comment-gerer-les-erreurs-429-sur-azure-cosmos-db/</guid>
        <description>Les erreurs HTTP 429 se produisent lorsque la consommation sur un conteneur est supérieure au débit provisionné.
Consommation en RU par seconde  RU provisionné par seconde = HTTP 429.</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/azure.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>azure</category>
            
          
            
              <category>dotnet</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>cosmos</category>
            
          
        
        
          
            
              <category>azure</category>
            
          
        
        
          
            
              <category>cloud</category>
            
          
        
      </item>
      
      <item>
        <title>[.NET] Comment lire un très gros fichier csv</title>
        <link>https://blog.jeremylandon.com/fr/2020/03/30/dotnet-comment-lire-un-tres-gros-fichier-csv/</link>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Mon, 08 Jun 2020 18:40:57 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/03/30/dotnet-comment-lire-un-tres-gros-fichier-csv/</guid>
        <description>L&amp;rsquo;article a été mis à jour suite à un complément d&amp;rsquo;information fourni par le développeur principal de TinyCsvParser, cf conclusionLe traitement d&amp;rsquo;un fichier csv de plusieurs Go peut vite être coûteux en terme de performance.</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/dotnetcore.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>algorithm</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>benchmark</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
          
            
              <category>benchmark</category>
            
          
        
      </item>
      
      <item>
        <title>[Azure] Pattern Request/Response avec Azure Service Bus</title>
        <link>https://blog.jeremylandon.com/fr/2020/03/22/azure-pattern-request-response-avec-azure-service-bus/</link>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
        <author>contact@jeremylandon.com (Jérémy Landon)</author>
        <atom:modified>Sun, 19 Apr 2020 11:18:35 +0200</atom:modified>
        <guid>https://blog.jeremylandon.com/fr/2020/03/22/azure-pattern-request-response-avec-azure-service-bus/</guid>
        <description>Une des façons les plus simples et courantes d&amp;rsquo;utiliser les services de messagerie tels qu&amp;rsquo;Azure Service Bus est pour effectuer une communication unidirectionnel.
source:https://docs.</description>
        
        <dc:creator>Jérémy Landon</dc:creator>
        <media:content url="https://blog.jeremylandon.com/images/logo/azure.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>csharp</category>
            
          
            
              <category>azure</category>
            
          
            
              <category>pattern</category>
            
          
        
        
          
            
              <category>azure</category>
            
          
        
        
          
            
              <category>cloud</category>
            
          
        
      </item>
      

    
  </channel>
</rss>